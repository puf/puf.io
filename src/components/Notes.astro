---
import path from "path";

export const notesPath = path.join(process.cwd(), "notes");
export function getSlugForNote(note) {
  return (note.file || "")
      .replace(notesPath, "") // remove local path
      .replace(/\.md$/, "") // remove .md extension
      .replace(/^\//, "") // remove leading /
      .toLowerCase().replace(/\s/g, '-')  // replace spaces with -
      .split("").filter(c => "()".indexOf(c) == -1).join("") // remove some chars
      .replace(/_readme$/, "") // treat _readme.md like an index.html
      ;
}
export function getTypeForNote(note) {
  const slug = getSlugForNote(note);
  return slug.substring(0, slug.indexOf("/"))
}
export function getNameForNote(note) {
  const slug = getSlugForNote(note);
  return slug.substring(getTypeForNote(note).length+1);
}
export function getPubDateForNote(note) {
  if (note.frontmatter.pubDate) return note.frontmatter.pubDate;
  if (note.frontmatter.finishedDate) return note.frontmatter.finishedDate;
    // TODO: make extensible to other types too
    return ""; // What should the default be here?
}

export async function getNotes(options?: { includeSkip?: boolean }) {
  // Get all notes recursively from the notes directory
  const notes = await Astro.glob("../../notes/**/*.md");

  // Convert notes to more usable type, and sort them
  let results: any[] = []; // TODO: define type
  for (const note of notes) {
    const slug = getSlugForNote(note);
    const type = getTypeForNote(note)
    const name = getNameForNote(note);
    const pubDate = getPubDateForNote(note);

    const skipped = note.frontmatter?.skip === true;
    const includeSkip = options?.includeSkip ?? false;
    if (includeSkip || !skipped) {
      results.push({ params: { slug, type, name, pubDate }, props: note });
    }
  }
  // Sort by date
  results.sort((a, b) => {
    const aDate = new Date(a.params.pubDate);
    const bDate = new Date(b.params.pubDate);
    return bDate.getTime() - aDate.getTime();
  });

  // Sort skip notes to the end
  results.sort((a, b) => {
    const aSkip = a.props.frontmatter?.skip === true;
    const bSkip = b.props.frontmatter?.skip === true;
    if (aSkip && !bSkip) {
      return 1;
    } else if (!aSkip && bSkip) {
      return -1;
    } else {
      return 0;
    }
  });

  // Remove drafts
  results = results.filter((item) => {
    const isDraft = item.props.frontmatter?.draft === true;
    return !isDraft;
  });

  // console.log("getNotes", results)  
  return results;
}

// TODO: is this even used?
const notes = await getNotes().then((notes) =>
  notes.map((item) => {
    const slug = item.params.slug;
    // const tags = getTagsFromSource(item.props);
    return {
      article: item.props,
      slug,
      // tags,
    };
  })
);
---
<!--
<NoteCards notes={notes} client:idle />
-->