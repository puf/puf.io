---
import path from "path";

export const notesPath = path.join(process.cwd(), "notes");
export function getSlugForNote(note) {
  return (note.file || "")
      .replace(notesPath, "") // remove local path
      .replace(/\.(md|mdx)$/, "") // remove .md or .mdx extension
      .toLowerCase().replace(/\s/g, '-')  // replace spaces with -
      .split("").filter(c => "()%".indexOf(c) == -1).join("") // remove some chars
      .replace(/_readme$/, "") // treat _readme.md like an index.html
      ;
}
export function getTypeForNote(note) {
  const slug = getSlugForNote(note);
  return slug.substring(1, slug.indexOf("/", 1))
}
export function getNameForNote(note) {
  const slug = getSlugForNote(note);
  return slug.substring(getTypeForNote(note).length+1);
}
export function getPubDateForNote(note) {
  if (note.params?.pubDate) return note.params.pubDate;
  if (note.frontmatter?.pubDate) return note.frontmatter.pubDate;
  if (note.frontmatter?.finishedDate) return note.frontmatter.finishedDate;
  // TODO: make extensible to other types too
  // no pubDate -> return undefined
}

export async function getNotes(options?: { keepIf?: (note: any) => boolean }) {
  // Get all notes recursively from the notes directory
  const notes = await Astro.glob("../../notes/**/*.{md,mdx}");
  const nowDate = new Date();

  // Convert notes to more usable type, and sort them
  let results: any[] = []; // TODO: define type
  for (const note of notes) {
    const slug = getSlugForNote(note);
    const type = getTypeForNote(note)
    const name = getNameForNote(note);
    let pubDate = getPubDateForNote(note);
    
    if (typeof pubDate !== 'undefined' && typeof pubDate !== 'string' && typeof pubDate !== 'number') {
      //console.error("Invalid pubDate value:", pubDate, "skipping:", note.file);
      // Skip this file
      continue
    }
    if (typeof pubDate === 'string' && pubDate.length === 0) {
      console.log("pubDate:", pubDate, "for:", note.file, "this will lead to complaints from the router later")
    }
    const isDraft = ''+((pubDate==="" || pubDate === undefined || typeof pubDate === 'undefined' || new Date(pubDate) > nowDate) && !/readme.md$/.test(note.file));

    //if (note.file.match("^_") && !note.file.match("_readme.md")) console.error(`Hidden file: ${note.file}`);

    results.push({ params: { slug, type, name, pubDate, isDraft }, props: note });

    // add any aliases from the note doc's frontmatter
    if (note.frontmatter?.aliases) {
      for (const alias of note.frontmatter.aliases) {
        results.push({ params: { slug: alias }, props: { type: "redirect", redirectTo: slug} });
      }
    }
  }

  if (process.env.NODE_ENV === 'production') {
    // Exclude (non index) draft posts
    results = results.filter((note) => note.params.isDraft !== 'true')
  }

  // Sort by date
  results.sort((a, b) => {
    const aDate = new Date(a.params.pubDate?.length ? a.params.pubDate : "1970/1/1").getTime();
    const bDate = new Date(b.params.pubDate?.length ? b.params.pubDate : "1970/1/1").getTime();
    return bDate - aDate;
  });

  // Remove by custom filter
  if (options?.keepIf) {
    results = results.filter(options.keepIf);
  }

  // console.log("getNotes", results.slice(-3))  
  return results;
}

// TODO: is this even used?
const notes = await getNotes().then((notes) =>
  notes.map((item) => {
    const slug = item.params.slug;
    // const tags = getTagsFromSource(item.props);
    return {
      article: item.props,
      slug,
      // tags,
    };
  })
);
