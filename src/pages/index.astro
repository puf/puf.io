---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import type { MarkdownInstance } from "astro";
import path from "path";
import { getNotes } from '../components/Notes.astro';
import { getPubDateForNote } from '../components/Notes.astro';


let readme: MarkdownInstance<Record<string, any>> | null = null;
try {
  const items = await Astro.glob("../../notes/readme.md");
  readme = items[0];
} catch (error) {}
const { Content } = readme || { Content: () => null };

const notesPath = path.join(process.cwd(), "notes");
console.log(`CWD: ${process.cwd()}, Notes path: ${notesPath}`)
const notes = await getNotes(); // Loads all notes from disk
const readmes = {}, intros = {}
const recents = { posts: [], socials: [], books: [] }
const counts = { posts: 0, socials: 0, books: 0 }
const CATEGORIES = ["posts", "socials", "books"] // TODO: should we derive this from readmes?

// load recent notes (per category: maxcount=3, maxage=6m)
let notesCount = 0;
notes.forEach((note) => {
	const { type } = note.params;
	if (/readme.md$/.test(note.props.file)) {
		if (!readmes[type]) readmes[type] = note;
		if (!intros[type]) {
			intros[type] = note.props.rawContent().substring(0, note.props.rawContent().indexOf(".") + 1)
		}
		return; // don't further process readmes
	}

	const cutoffDate = new Date(Date.now() - 90*24*60*60*1000)
	if (typeof recents[type] !== 'undefined') {
		notesCount++
		counts[type]++
		if (recents[type].length < 3 && new Date(getPubDateForNote(note)) > cutoffDate) {
			recents[type].push(note);
		}
	}
})

---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>
			{
				readme != null && (<article><Content /></article>)
			}
			<hr/>
			{CATEGORIES.map((category) => (
				<h3>{category}</h3>
				<p>{intros[category]}</p>
				<label>Recent {category}</label>
				<ul>
					{recents[category].map((note) => (
						<li>
							{note.params.isDraft === 'true' && <span title="This is a draft">ðŸš§</span>}
							<a href={note.params.slug}>{note.props.frontmatter.title}</a> ({note.params.pubDate})
						</li>
					))}
				</ul>
				<span>Or check out <a href={category}>all {counts[category]} {category}</a></span>
				<hr/>
			))}
		</main>
		<Footer slug="/" />
	</body>
</html>
