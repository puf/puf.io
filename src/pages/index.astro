---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import type { MarkdownInstance } from "astro";
import path from "path";
import { pathHasLocale } from 'astro:i18n';

let readme: MarkdownInstance<Record<string, any>> | null = null;
try {
  const items = await Astro.glob("../../notes/readme.md");
  readme = items[0];
} catch (error) {}
const { Content } = readme || { Content: () => null };

let recentNotes: MarkdownInstance<Record<string, any>> [] = [];
const notesPath = path.join(process.cwd(), "notes");
console.log(`CWD: ${process.cwd()}, Notes path: ${notesPath}`)
const notes = await Astro.glob("../../notes/**/*.md")
const readmes = { "posts": "Intro", "books": "Intro" }
const recents = { "posts": [], "books": [] }
const CATEGORIES = ["posts", "books"]

// calculate some useful properties for the node
notes.forEach((note) => { 
    let slug = note.file.replace(notesPath, "").replace(/\.md$/, "").replace(/^\//, "").toLowerCase().replace(/\s/g, '-').split("").filter(c => "()".indexOf(c) == -1).join("");
	note.frontmatter.slug = slug;
	note.frontmatter.type = slug.substring(0, slug.indexOf("/"));
	note.frontmatter.name = slug.substring(note.frontmatter.type.length+1)
	if (!note.frontmatter.pubDate && note.frontmatter.type == "books" && note.frontmatter.finishedDate) note.frontmatter.pubDate = note.frontmatter.finishedDate;
	if (note.frontmatter.type === 'books') console.log(note.frontmatter);
})
notes.sort((a, b) => {
	const aDate = new Date(a.frontmatter?.pubDate);
	const bDate = new Date(b.frontmatter?.pubDate);
	return bDate.getTime() - aDate.getTime();
})
// TODO: load recent notes (per category: maxcount=3, maxage=6m)
notes.forEach((note) => {
	if (["readme", "_readme"].indexOf(note.frontmatter.name) >= 0) {
		console.log(note.file, "is a readme for ", note.frontmatter.type);
		if (readmes[note.frontmatter.type]) readmes[note.frontmatter.type] = note;
		return; // don't further process readmes
	}
	if (typeof recents[note.frontmatter.type] !== 'undefined') {
		console.log('Added', note.file, 'to', note.frontmatter.type)
		recents[note.frontmatter.type].push(note);
	}
	else {
		console.log("SKIPPING", note.file)
	}
})
console.log("READMES", readmes)
//console.log("RECENT", JSON.stringify(recents));
// Add missing pubDates for certain types
recentNotes = notes.filter((a) => a.frontmatter?.pubDate || a.frontmatter.finishedDate).toSorted((a, b) => {
	const aDate = new Date(a.frontmatter?.pubDate);
	const bDate = new Date(b.frontmatter?.pubDate);
	return bDate.getTime() - aDate.getTime();
}).map((target) => {
	const filePath = target.file || "";
    let slug = filePath.replace(notesPath, "").replace(/\.md$/, "").replace(/^\//, "").toLowerCase().replace(/\s/g, '-').split("").filter(c => "()".indexOf(c) == -1).join("");
	console.log(`${filePath} => ${slug}`)
    target.frontmatter.slug = slug;
	return target;
});
// TODO: load all draft posts on staging

---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>
			{
				readme != null && (<article><Content /></article>)
			}
			<hr/>
			<p>There are {notes.length} notes across {CATEGORIES.length} categories.</p>
			<hr/>
			{CATEGORIES.map((category) => (
				<label>Recent {category} ({recents[category].length})</label>
				<ol>
					{recents[category].map((note) => (
						<li><a href={note.frontmatter.slug}>{note.frontmatter.title}</a> ({note.frontmatter.pubDate})</li>
					))}
				</ol>
				<a href={category}>All {category} ({recents[category].length})</a>
				<hr/>
			))}
			<hr/>
			<label>Recent notes across all categories</label>
			<ul>
				{recentNotes.slice(0, 3).map((post) => (
				  <li><a href={post.frontmatter.slug}>{post.frontmatter.title}</a></li>
				))}
			</ul>
		</main>
		<Footer />
	</body>
</html>
