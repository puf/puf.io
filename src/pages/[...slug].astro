---
import { type CollectionEntry, getCollection } from 'astro:content';
import NotePost from '../layouts/NotePost.astro';
import IndexPage from '../layouts/IndexPage.astro';
import { getNotes, getPubDateForNote, getSlugForNote, getTypeForNote } from '../components/Notes.astro';
import type { MarkdownInstance } from "astro";

export async function getStaticPaths() {
  return await getNotes();
  // const aliases = await getAliasPaths(notes);
  // console.log(notes.slice(0,3).concat(aliases))
	// return notes.concat(aliases);
}

type Props = MarkdownInstance<Record<string, any>> & { redirectTo?: string };
console.log(`Rendering ${JSON.stringify(Astro)}`);
const post = Astro.props;
const { Content } = post;

const pubDate = getPubDateForNote(post)
const isReadme = (/readme.md$/.test(post.file))
const type = getTypeForNote(post)
const slug = getSlugForNote(post)
const isRedirect = typeof post.redirectTo != 'undefined' && post.redirectTo.length > 0;

console.log(`Rendering ${post.file} with pubDate: ${pubDate}, isReadme: ${isReadme}, isRedirect: ${isRedirect} to ${JSON.stringify(post)}`);
---

{(pubDate &&
<NotePost {...post} pubDate={pubDate} title={post.frontmatter.title} description={post.frontmatter.description}>
  <Content />
</NotePost>
)}
{( isReadme && 
  <meta charset="utf-8"/>
  <IndexPage {...post}>
    <article><Content /></article>
  </IndexPage>
)}
{(isRedirect && 
  <>
    <meta http-equiv="refresh" content={`0;url=${post.redirectTo}`} />
    <p>Content was moved to <a href={`${post.redirectTo}`}>{post.redirectTo}</a></p>
  </>
)}