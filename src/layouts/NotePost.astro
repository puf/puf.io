---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import StarRating from '../components/StarRating.astro';
import { getTypeForNote, getSlugForNote, getNotes } from '../components/Notes.astro';
import AlsoOn from '../components/AlsoOn.astro';
import { Picture } from 'astro:assets';

type Props = CollectionEntry<'blog'>['data'] & {
  frontmatter: {
		author: string;
		pageCount: number;
		startedDate: Date;
		finishedDate: Date;
		rating: number;
		link: string;
		alsoOn: string[];
		location?: [number, number];
		locations?: [number, number][];
		tags?: string[];
  };
};

// Add defensive checks for undefined variables
if (!Astro.props) {
	throw new Error("Astro.props is undefined. Ensure props are passed correctly.");
} else console.log("NotePost.astro: Astro.props=", Astro.props);

const { title, description, pubDate, updatedDate, heroImage, frontmatter } = Astro.props || {};
const type = getTypeForNote(Astro.props);
if (!type) {
	throw new Error("Type is undefined. Ensure getTypeForNote function is working correctly.");
}
const slug = getSlugForNote(Astro.props);
if (!slug) {
	throw new Error("Slug is undefined. Ensure getSlugForNote function is working correctly.");
}
const note = Astro.props;
const typeurl = "/" + type;
const location = frontmatter?.location || frontmatter?.locations?.[0];

const otherNotesForTags = {};
const otherNoteCountForTags = {};
await getNotes({ keepIf: (other) => {
	return other.params?.type === type && 
		other.props.file !== note.file &&
		!/readme.md$/.test(other.props.file) &&
		(note.frontmatter.tags || []).reduce((c,a) => { return (other.props.frontmatter.tags || []).includes(a) || c }, false)		
}}).then(notes => {
	if (notes.length === 0) {
		console.warn(`No notes found for type: ${type} with any of the tags ${JSON.stringify(note.frontmatter.tags)}`);	
	}
	else {
		console.log(`Found ${notes.length} ${type} with some overlapping tags`);
	}
	notes.forEach((other) => {
		(other.props.frontmatter.tags || []).forEach((tag) => {
			if ((note.frontmatter.tags || []).includes(tag)) {
				otherNoteCountForTags[tag] = (otherNoteCountForTags[tag] || 0) + 1;
			}
		})
	})
	return notes.map((other) => {
		const matchCount = (note.frontmatter.tags || []).filter(tag => (other.props.frontmatter.tags || []).includes(tag)).length;
		return { ...other, matchCount };
	}).sort((a, b) => b.matchCount - a.matchCount);
}).then((notes) => {
	notes.slice(0, 5).forEach((note) => {
		otherNotesForTags[note.params.slug] = note; // Use slug as key to avoid duplicates across tags
	});
}).catch((e) => {
	console.error(`Error fetching notes for type: ${type}`, e);
});
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: calc(100% - 2em);
				max-width: 100%;
				margin: 0;
			}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--gray));
			}
			.last-updated-on {
				font-style: italic;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{heroImage && <img width={1020} height={510} src={heroImage} alt="" />}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={new Date(pubDate)} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
						<hr />
					</div>
					<div class="frontmatter">
						{type === "books" ? (
						  <ul class="props">
							<!-- Get rid of the red squiggles on frontmatter -->
							<li>Author: {frontmatter?.author}</li>
							<li>Page count: {frontmatter.pageCount}</li>
							<li>Started on: {frontmatter.startedDate}</li>
							<li>Finished on: {frontmatter.finishedDate}</li>
							<li>Rating: {frontmatter.rating} out of 5 stars</li> <!-- render star rating -->
							<StarRating rating={frontmatter.rating} /><br/>
							<li><AlsoOn links={[frontmatter.link]} /></li>
						  </ul>
						  <hr/>
						) : ( "" )}
						
						<AlsoOn links={frontmatter?.alsoOn} />
					</div>
					<slot />
					{location && (
						<p>Location of this post on  
							<a href={`https://www.google.com/maps/@${location[0]},${location[1]},17z`} target="_blank">
								Google Maps
								<svg width="12px" height="12px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg" fill="none" aria-hidden="true">
									<path stroke="#535358" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M22 3h7v7M27.5 4.5L20 12M17 5H8a3 3 0 00-3 3v16a3 3 0 003 3h16a3 3 0 003-3v-9"/>
								</svg>
								<span class="sr-only"> opens a new window</span>
							</a>
						</p>
					)}
				</div>
			</article>
		{Object.keys(otherNotesForTags).length > 0 && (
			<nav class="related-posts prose" aria-label="Other posts with similar tags">
				<h3>Similar {type}:</h3>
				<ul>
					{Object.values(otherNotesForTags).map((otherNote) => (
						<li>
							<a href={otherNote.params.slug}>{otherNote.props.frontmatter.title}</a>
							{otherNote.props.frontmatter.tags && otherNote.props.frontmatter.tags.length > 0 && (
								<!--
								<span style="margin-left: 0.5em;">
									{otherNote.props.frontmatter.tags.map(tag => (
										<a href={`/tags/${encodeURIComponent(tag)}`}>
											<span
												style="
													display: inline-block;
													background: #eee;
													color: #333;
													border-radius: 999px;
													padding: 0.1em 0.7em;
													font-size: 0.5em;
													margin-right: 0.3em;
												"
											>{tag}</span>
										</a>
									))}
								</span>
								-->
							)}
						</li>
					))}
				</ul>
				<h3>Or see all {type} about:</h3>
				<ul>
					{(note.frontmatter.tags || []).map((tag) => {
						const count = otherNoteCountForTags[tag];
						if (count === 0 || typeof count === 'undefined') {
							// Don't show tags with no other notes
							return null;
						}
						return (
							<li key={tag}>
								<a href={`/tags/${encodeURIComponent(tag)}`}>{tag}</a>
								{count > 0 && (
									<span style="margin-left: 0.5em; color: #888; font-size: 0.9em;">
										({count} other {type})
									</span>
								)}
							</li>
						);
					})}
				</ul>
			</nav>
		)}
		</main>
		<Footer {slug}/>
	</body>
</html>
